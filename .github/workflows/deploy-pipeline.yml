name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: destroy # change to 'destroy' when tearing down infra

jobs:
  # -------------------------
  # Stage 1: Terraform EC2
  # -------------------------
  deploy_aws_infrastructure:
    name: Build AWS EC2 infrastructure
    runs-on: ubuntu-latest
    outputs:
      ec2_public_ip: ${{ steps.set_ec2_ip.outputs.ec2_public_ip }}
      image_name: ${{ steps.set_image_name.outputs.image_name }}
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
      terraform_action: ${{ env.TERRAFORM_ACTION }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform apply
        working-directory: ./terraform
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Set EC2 public IP output
        id: set_ec2_ip
        working-directory: ./terraform
        run: |
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          echo "ec2_public_ip=$EC2_PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Set image name output
        id: set_image_name
        working-directory: ./terraform
        run: |
          IMAGE_NAME=$(terraform output -raw image_name)
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Set image tag output
        id: set_image_tag
        working-directory: ./terraform
        run: |
          IMAGE_TAG=$(terraform output -raw image_tag)
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  # -------------------------
  # Stage 2: Create ECR repo if needed
  # -------------------------
  create_ecr_repository:
    name: Create ECR repository
    runs-on: ubuntu-latest
    needs: deploy_aws_infrastructure
    outputs:
      ecr_uri: ${{ steps.set_ecr_uri.outputs.ecr_uri }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
        run: |
          aws ecr describe-repositories --repository-names "$IMAGE_NAME" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$IMAGE_NAME"

      - name: Set ECR URI
        id: set_ecr_uri
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
        run: |
          ECR_URI="${{ secrets.ECR_REGISTRY }}/$IMAGE_NAME"
          echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT

  # -------------------------
  # Stage 3: Build and push Docker image
  # -------------------------
  build_and_push_docker:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    needs:
      - deploy_aws_infrastructure
      - create_ecr_repository
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    steps:
      - uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t ${{ needs.deploy_aws_infrastructure.outputs.image_name }}:${{ needs.deploy_aws_infrastructure.outputs.image_tag }} .

      - name: Tag Docker image for ECR
        run: |
          docker tag ${{ needs.deploy_aws_infrastructure.outputs.image_name }}:${{ needs.deploy_aws_infrastructure.outputs.image_tag }} ${{ needs.create_ecr_repository.outputs.ecr_uri }}:${{ needs.deploy_aws_infrastructure.outputs.image_tag }}

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ needs.create_ecr_repository.outputs.ecr_uri }}:${{ needs.deploy_aws_infrastructure.outputs.image_tag }}

  # -------------------------
  # Stage 4: Deploy Docker to EC2
  # -------------------------
  deploy_to_ec2:
    name: Deploy Docker Image to EC2
    runs-on: ubuntu-latest
    needs:
      - deploy_aws_infrastructure
      - create_ecr_repository
      - build_and_push_docker
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ needs.deploy_aws_infrastructure.outputs.ec2_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Normalize container name
            CONTAINER_NAME=$(echo "${{ needs.deploy_aws_infrastructure.outputs.image_name }}" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9_-')

            ECR_URI="${{ needs.create_ecr_repository.outputs.ecr_uri }}"
            IMAGE_TAG="${{ needs.deploy_aws_infrastructure.outputs.image_tag }}"

            # Login to ECR
            echo "Logging into ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin $ECR_URI

            # Pull and run the Docker image
            echo "Pulling Docker image..."
            sudo docker pull $ECR_URI:$IMAGE_TAG

            echo "Stopping old container if exists..."
            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME || true

            echo "Running new container..."
            sudo docker run -d -p 5000:5000 --name $CONTAINER_NAME $ECR_URI:$IMAGE_TAG

            echo "âœ… Deployment complete!"
