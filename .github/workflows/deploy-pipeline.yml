name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: flaskapp  # simple fixed name
  TERRAFORM_ACTION: apply

jobs:
  deploy_aws_infrastructure:
    name: Build AWS EC2 infrastructure
    runs-on: ubuntu-latest
    outputs:
      ec2_public_ip: ${{ steps.set_ec2_ip.outputs.ec2_public_ip }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform apply
        working-directory: ./terraform
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Set EC2 public IP output
        id: set_ec2_ip
        working-directory: ./terraform
        run: |
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          echo "::set-output name=ec2_public_ip::$EC2_PUBLIC_IP"

  build_and_push_docker:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    needs: deploy_aws_infrastructure
    steps:
      - uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}  # short commit SHA as tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  deploy_to_ec2:
    name: Deploy Docker Image to EC2
    runs-on: ubuntu-latest
    needs: [deploy_aws_infrastructure, build_and_push_docker]
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ needs.deploy_aws_infrastructure.outputs.ec2_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: IMAGE_TAG,ECR_REGISTRY,ECR_REPOSITORY
          script: |
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Stop and remove old container
            sudo docker stop flaskapp || true
            sudo docker rm flaskapp || true

            # Pull and run new image
            sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            sudo docker run -d -p 5000:5000 --name flaskapp $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            echo "âœ… Deployment complete!"
