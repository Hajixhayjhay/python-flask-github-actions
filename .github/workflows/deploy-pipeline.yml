name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply   # change to 'destroy' if needed
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  # -----------------------------
  # 1️⃣ Deploy AWS Infrastructure
  # -----------------------------
  deploy:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.tf_outputs.outputs.IMAGE_NAME }}
      image_tag: ${{ steps.tf_outputs.outputs.IMAGE_TAG }}
      ec2_public_ip: ${{ steps.tf_outputs.outputs.EC2_PUBLIC_IP }}
    steps:
      # Checkout repo
      - uses: actions/checkout@v3

      # Setup Terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      # Terraform init and apply/destroy
      - name: Terraform action
        working-directory: ./terraform
        run: |
          terraform init
          terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      # Set Terraform outputs
      - name: Set Terraform outputs
        id: tf_outputs
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./terraform
        run: |
          IMAGE_NAME=$(terraform output -raw image_name)
          IMAGE_TAG=$(terraform output -raw image_tag)
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)

          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV

          echo "::set-output name=IMAGE_NAME::$IMAGE_NAME"
          echo "::set-output name=IMAGE_TAG::$IMAGE_TAG"
          echo "::set-output name=EC2_PUBLIC_IP::$EC2_PUBLIC_IP"

  # -----------------------------
  # 2️⃣ ECR Repository + Docker
  # -----------------------------
  deploy_docker:
    name: Create ECR, Build & Deploy Docker
    needs: deploy
    if: ${{ env.TERRAFORM_ACTION != 'destroy' }}
    runs-on: ubuntu-latest
    steps:
      # Checkout repo
      - uses: actions/checkout@v3

      # Set variables from deploy outputs
      - name: Set environment variables
        run: |
          echo "IMAGE_NAME=${{ needs.deploy.outputs.image_name }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ needs.deploy.outputs.image_tag }}" >> $GITHUB_ENV
          echo "EC2_PUBLIC_IP=${{ needs.deploy.outputs.ec2_public_ip }}" >> $GITHUB_ENV

      # Check if ECR repository exists, create if not
      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names "$IMAGE_NAME" || \
          aws ecr create-repository --repository-name "$IMAGE_NAME"

      # Build & push Docker image
      - name: Build & push Docker image
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG

      # Deploy Docker container to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            # Pull & run container
            sudo docker stop $IMAGE_NAME || true
            sudo docker rm $IMAGE_NAME || true
            sudo docker pull $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
            sudo docker run -d -p 5000:5000 --name $IMAGE_NAME $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
