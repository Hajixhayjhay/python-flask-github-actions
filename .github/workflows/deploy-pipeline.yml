name: Terraform + Docker Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPO: docker-flask
  EC2_NAME: flaskapp-web-server
  TERRAFORM_VER: 1.5.1
  GIT_SHA: ${{ github.sha }}

jobs:
  terraform:
    name: Provision AWS Resources
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VER }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform apply
        run: terraform destroy -auto-approve 

      - name: Save Terraform Outputs
        id: tf_outputs
        run: |
          # Clean output and safely write to GITHUB_ENV
          EC2_IP=$(terraform output -raw ec2_public_ip | tr -d '\r\n')
          ECR_URL=$(terraform output -raw ecr_repo_url | tr -d '\r\n')
          echo "EC2_PUBLIC_IP=$EC2_IP" >> $GITHUB_ENV
          echo "ECR_REPO_URL=$ECR_URL" >> $GITHUB_ENV

  build_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_REGION: us-east-1
      GIT_SHA: ${{ github.sha }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug ECR URL
        run: echo "ECR_REPO_URL=$ECR_REPO_URL"


      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ECR_REPO_URL

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REPO_URL:$GIT_SHA .
          docker push $ECR_REPO_URL:$GIT_SHA

  deploy:
    name: Deploy on EC2
    runs-on: ubuntu-latest
    needs: build_push
    env:
      AWS_REGION: us-east-1
      GIT_SHA: ${{ github.sha }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: SSH into EC2 and Deploy Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Cleaning old containers..."
            docker rm -f flask-app || true
            docker rmi -f $ECR_REPO_URL:$GIT_SHA || true

            echo "Logging into ECR..."
            aws ecr get-login-password --region $AWS_REGION | \
              docker login --username AWS --password-stdin $ECR_REPO_URL

            echo "Running new container..."
            docker run -d -p 80:5000 --name flask-app $ECR_REPO_URL:$GIT_SHA
