name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: destroy
  IMAGE_NAME: flaskapp

jobs:
  # -------------------------
  # Stage 1: Terraform EC2
  # -------------------------
  deploy_aws_infrastructure:
    name: Build AWS EC2 infrastructure
    runs-on: ubuntu-latest
    outputs:
      ec2_public_ip: ${{ steps.set_ec2_ip.outputs.ec2_public_ip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform apply
        working-directory: ./terraform
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Set EC2 public IP output
        id: set_ec2_ip
        working-directory: ./terraform
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip | tr -d '\r\n')
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "::set-output name=ec2_public_ip::$EC2_IP"

  # -------------------------
  # Stage 2: Create ECR repo if needed
  # -------------------------
  create_ecr_repository:
    name: Create ECR repository
    runs-on: ubuntu-latest
    needs: deploy_aws_infrastructure
    outputs:
      ecr_uri: ${{ steps.get_ecr_uri.outputs.ECR_URI }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if ECR repository exists
        id: check_ecr
        run: |
          repo_name=$(aws ecr describe-repositories \
            --repository-names ${{ env.IMAGE_NAME }} \
            --query "repositories[0].repositoryName" \
            --output text 2>/dev/null || echo "")
          echo "repo_name=$repo_name" >> $GITHUB_ENV

      - name: Create ECR repository if not exists
        if: env.repo_name == ''
        run: aws ecr create-repository --repository-name ${{ env.IMAGE_NAME }}

      - name: Get ECR URI
        id: get_ecr_uri
        run: |
          ECR_URI=$(aws ecr describe-repositories \
            --repository-names ${{ env.IMAGE_NAME }} \
            --query "repositories[0].repositoryUri" \
            --output text | tr -d '\r\n ')
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
          echo "::set-output name=ECR_URI::$ECR_URI"

  # -------------------------
  # Stage 3: Build and Push Docker Image
  # -------------------------
  build_and_push_docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create_ecr_repository
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: latest
          ECR_URI: ${{ needs.create_ecr_repository.outputs.ecr_uri }}
        run: |
          echo "Using ECR URI: $ECR_URI"
          docker build -t "${IMAGE_NAME}:${IMAGE_TAG}" .
          docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${ECR_URI}:${IMAGE_TAG}"
          docker push "${ECR_URI}:${IMAGE_TAG}"

  # -------------------------
  # Stage 4: Deploy Docker to EC2
  # -------------------------
  deploy_to_ec2:
    name: Deploy Docker Image to EC2
    runs-on: ubuntu-latest
    needs: [deploy_aws_infrastructure, build_and_push_docker]
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ needs.deploy_aws_infrastructure.outputs.ec2_public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            sudo docker login --username AWS --password-stdin ${{ needs.create_ecr_repository.outputs.ecr_uri }}

            # Pull image from ECR
            sudo docker pull ${{ needs.create_ecr_repository.outputs.ecr_uri }}:latest

            # Stop old container and run new one
            sudo docker stop flaskapp || true
            sudo docker rm flaskapp || true
            sudo docker run -d -p 5000:5000 --name flaskapp ${{ needs.create_ecr_repository.outputs.ecr_uri }}:latest
