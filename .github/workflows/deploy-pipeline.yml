name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply
  IMAGE_NAME: flaskapp

jobs:
  # -------------------------
  # Stage 1: Terraform EC2
  # -------------------------
  deploy_aws_infrastructure:
    name: Build AWS EC2 infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform apply/destroy
        working-directory: ./terraform
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Get EC2 public IP
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./terraform
        run: |
           EC2_IP=$(terraform output -raw ec2_public_ip | tr -d '\r')
            echo "EC2_IP=${EC2_IP}" >> $GITHUB_ENV
  # -------------------------
  # Stage 2: Create ECR repo if needed
  # -------------------------
  create_ecr_repository:
    name: Create ECR repository
    runs-on: ubuntu-latest
    needs: deploy_aws_infrastructure
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if ECR repository exists
        id: check_repo
        run: |
          repo_name=$(aws ecr describe-repositories --repository-names ${{ env.IMAGE_NAME }} 2>/dev/null || echo "")
          echo "repo_name=$repo_name" >> $GITHUB_ENV

      - name: Create ECR repository if not exists
        if: env.repo_name == ''
        run: |
          aws ecr create-repository --repository-name ${{ env.IMAGE_NAME }}

      - name: Get ECR URI
        run: |
           ECR_URI=$(aws ecr describe-repositories --repository-names ${{ env.IMAGE_NAME }} --query "repositories[0].repositoryUri" --output text)
            echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
  # -------------------------
  # Stage 3: Build Docker and push
  # -------------------------
  build_and_push_docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create_ecr_repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build, tag, and push Docker image
        run: |
          docker build -t ${{ env.ECR_URI }}:latest .
          docker push ${{ env.ECR_URI }}:latest

  # -------------------------
  # Stage 4: Deploy Docker to EC2
  # -------------------------
  deploy_to_ec2:
    name: Deploy Docker on EC2
    runs-on: ubuntu-latest
    needs: build_and_push_docker
    steps:
      - name: SSH and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ needs.deploy_aws_infrastructure.outputs.EC2_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            # Pull latest image
            sudo docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:latest

            # Stop old container if exists
            sudo docker stop flaskapp || true
            sudo docker rm flaskapp || true

            # Run new container
            sudo docker run -d -p 5000:5000 --name flaskapp ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:latest
