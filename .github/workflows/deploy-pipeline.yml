name: Deploy Application to EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-ecr-repo

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ----------------------------
      # 1️⃣ Checkout code
      # ----------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ----------------------------
      # 2️⃣ Configure AWS credentials
      # ----------------------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ----------------------------
      # 3️⃣ Setup Terraform
      # ----------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      # ----------------------------
      # 4️⃣ Get EC2 Public IP
      # ----------------------------
      - name: Get EC2 Public IP
        id: get_ip
        run: |
          EC2_PUBLIC_IP=$(terraform output -raw instance_public_ip)
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
          echo "✅ EC2 Public IP: $EC2_PUBLIC_IP"

      # ----------------------------
      # 5️⃣ Create ECR Repository (Safe)
      # ----------------------------
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region $AWS_REGION >/dev/null 2>&1 || \
          aws ecr create-repository \
            --repository-name "$ECR_REPOSITORY" \
            --image-scanning-configuration scanOnPush=true \
            --region $AWS_REGION

      # ----------------------------
      # 6️⃣ Login to ECR
      # ----------------------------
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ----------------------------
      # 7️⃣ Build and Push Docker Image
      # ----------------------------
      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

      # ----------------------------
      # 8️⃣ Deploy to EC2
      # ----------------------------
      - name: Deploy Docker container on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user  # Use ubuntu if it's an Ubuntu AMI
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Install Docker if missing
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            # Pull new image
            sudo docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            # Stop & remove old container if exists
            sudo docker stop app_container || true
            sudo docker rm app_container || true

            # Run new container
            sudo docker run -d -p 80:80 --name app_container \
              ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            echo "✅ Application deployed successfully to EC2!"
