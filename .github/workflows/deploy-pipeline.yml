name: Terraform + Docker Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy_first:
        description: 'Destroy existing resources before applying?'
        default: 'false'

env:
  AWS_REGION: us-east-1
  TERRAFORM_VER: 1.5.1
  ECR_REPO: docker-flask

jobs:
  terraform:
    name: Provision AWS Resources
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      ec2_public_ip: ${{ steps.tf_outputs.outputs.ec2_public_ip }}
      ecr_repo_url: ${{ steps.tf_outputs.outputs.ecr_repo_url }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VER }}

      - name: Terraform Init
        run: terraform init

      - name: Destroy existing resources (optional)
        if: ${{ github.event.inputs.destroy_first == 'true' }}
        run: terraform destroy -auto-approve

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Save Terraform Outputs
        id: tf_outputs
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip | tr -d '\r\n')
          ECR_URL=$(terraform output -raw ecr_repo_url | tr -d '\r\n')
          echo "EC2_PUBLIC_IP=$EC2_IP" >> $GITHUB_ENV
          echo "ECR_REPO_URL=$ECR_URL" >> $GITHUB_ENV
          echo "ec2_public_ip=$EC2_IP" >> $GITHUB_OUTPUT
          echo "ecr_repo_url=$ECR_URL" >> $GITHUB_OUTPUT

  build_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_REGION: us-east-1
      GIT_SHA: ${{ github.sha }}
      ECR_REPO: docker-flask
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${GIT_SHA}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

  deploy:
    name: Deploy on EC2
    runs-on: ubuntu-latest
    needs: [terraform, build_push]
    env:
      AWS_REGION: us-east-1
      AWS_EC2: "flaskapp-web-server"
      GIT_SHA: ${{ github.sha }}
      ECR_REPO: docker-flask
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 Public IP
        run: |
          echo "EC2_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values=${{ env.AWS_EC2 }} \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)" >> $GITHUB_ENV
          echo "EC2 Public IP is $EC2_PUBLIC_IP"

      - name: SSH into EC2 and Deploy Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "🔍 Checking Docker & AWS CLI..."
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update -y && sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi

            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI v2..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt install -y unzip
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            fi

            echo "🧩 Configuring AWS CLI..."
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ env.AWS_REGION }}

            echo "🪣 Logging in to ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            echo "🧹 Cleaning old containers..."
            docker stop flask-app || true
            docker rm flask-app || true

            echo "📦 Pulling new image..."
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ github.sha }}

            echo "🚀 Running new container..."
            docker run -d -p 80:5000 --name flask-app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ github.sha }}

            echo "✅ Deployment complete! App should now be live."
