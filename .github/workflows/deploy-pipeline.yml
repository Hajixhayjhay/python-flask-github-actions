name: CI/CD - Flask on AWS EC2 via Terraform

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  TERRAFORM_VER: 1.9.5
  ECR_REPO: docker-flask

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ---------------------------
      # 1️⃣ Checkout Repository
      # ---------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ---------------------------
      # 2️⃣ Configure AWS Credentials
      # ---------------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ---------------------------
      # 3️⃣ Setup Terraform
      # ---------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VER }}

      # ---------------------------
      # 4️⃣ Terraform Init & Apply
      # ---------------------------
      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        run: terraform apply -auto-approve

      # ---------------------------
      # 5️⃣ Get Outputs
      # ---------------------------
      - name: Get Terraform outputs
        id: tf-output
        run: |
          echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
          echo "IMAGE_NAME=$(terraform output -raw image_name)" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(terraform output -raw image_tag)" >> $GITHUB_ENV

      # ---------------------------
      # 6️⃣ Login to Amazon ECR
      # ---------------------------
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ---------------------------
      # 7️⃣ Build & Push Docker Image
      # ---------------------------
      - name: Build, Tag, and Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPO }}:${GITHUB_SHA} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:${GITHUB_SHA}

      # ---------------------------
      # 8️⃣ Deploy to EC2
      # ---------------------------
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🔍 Checking Docker & AWS CLI..."
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update -y && sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi

            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              sudo snap install aws-cli --classic || \
              (curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
              sudo apt install -y unzip && unzip awscliv2.zip && sudo ./aws/install)
            fi

            echo "🧩 Configuring AWS CLI..."
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ env.AWS_REGION }}

            echo "🪣 Logging in to ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            echo "🧹 Cleaning old containers..."
            docker stop flask-app || true
            docker rm flask-app || true

            echo "📦 Pulling new image..."
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${GITHUB_SHA}

            echo "🚀 Running new container..."
            docker run -d -p 80:5000 --name flask-app \
              ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${GITHUB_SHA}

            echo "✅ Deployment complete! App should now be live."
