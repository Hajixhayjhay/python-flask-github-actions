name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: destroy  # change to 'destroy' if needed
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v3

      # 2. Setup Terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      # 3. Terraform init and apply
      - name: Terraform apply
        working-directory: ./terraform
        run: |
          terraform init
          terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      # 4. Set outputs from Terraform
      - name: Set outputs
        id: tf_outputs
        working-directory: ./terraform
        run: |
          echo "EC2_PUBLIC_IP=\"$(terraform output -raw ec2_public_ip | tr -d '\r')\"" >> $GITHUB_ENV
          echo "IMAGE_NAME=\"$(terraform output -raw image_name | tr -d '\r')\"" >> $GITHUB_ENV
          echo "IMAGE_TAG=\"$(terraform output -raw image_tag | tr -d '\r')\"" >> $GITHUB_ENV


      # 5. Create ECR repo if needed
      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories --repository-names "$IMAGE_NAME" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$IMAGE_NAME"

      # 6. Login to ECR
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 7. Build and push Docker image
      - name: Build & push Docker image
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG

      # 8. Deploy Docker to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            # Pull and run container
            sudo docker stop $IMAGE_NAME || true
            sudo docker rm $IMAGE_NAME || true
            sudo docker pull $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
            sudo docker run -d -p 5000:5000 --name $IMAGE_NAME $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
